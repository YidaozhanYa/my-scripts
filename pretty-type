#!/usr/bin/python3

from time import sleep
import pyperclip
import subprocess
import re
import os
import json

#change them both
space=u' '
space2=' '

replace_dict = json.loads(open(os.path.abspath(os.path.dirname(__file__))+"/pretty-type.json").read())

# code below from https://github.com/yuex/cjk-auto-spacing/blob/master/cjk_auto_spacing.py
cjk_range = [
    (u'\u3040', u'\u309F'),    # Japanese Hiragana
    (u'\u30A0', u'\u30FF'),    # Japanese Katakana
    (u'\u3400', u'\u4DB5'),    # CJK Unified Ideographs Extension A
    (u'\u4E00', u'\u9FEF'),    # CJK Unified Ideographs
    (u'\uF900', u'\uFAFF'),    # CJK Compatibility Ideographs
    (u'\U00020000', u'\U0002A6D6'),  # CJK Unified Ideographs Extension B
    (u'\U0002A700', u'\U0002B734'),  # CJK Unified Ideographs Extension C
    (u'\U0002b740', u'\U0002B81D'),  # CJK Unified Ideographs Extension D
    (u'\U0002B820', u'\U0002CEA1'),  # CJK Unified Ideographs Extension E
    (u'\U0002ceb0', u'\U0002EBE0'),  # CJK Unified Ideographs Extension F
    (u'\U0002F800', u'\U0002FA1F'),  # CJK Compatibility Ideographs Supplement
]

punc_range = [
    (u'\u0000', u'\u0020'),  # space
    (u'\u003c', u'\u003c'),  # less-than sign
    (u'\u003e', u'\u003e'),  # grater-than sign
    (u'\u3000', u'\u303f'),  # CJK Symbols and Punctuation
    (u'\uff00', u'\uffef'),  # Halfwidth and Fullwidth Forms
    (u'\u200D', u'\u200D'),           # ZERO WIDTH JOINER
    (u'\uFE0E', u'\uFE0F'),           # VARIATION SELECTOR-15/16
]


def _chinese_auto_spacing(text):
    def _with_range(char, check_range):
        for start, end in check_range:
            if char >= start and char <= end:
                return True
        return False
    def is_cjk(char):
        return _with_range(char, cjk_range)

    def is_punc(char):
        return _with_range(char, punc_range)
    ret = u''
    prev = None
    for char in text:
        sp = u''
        curr_is_cjk = is_cjk(char)
        curr_is_punc = is_punc(char)
        if prev:
            prev_is_cjk, prev_is_punc = prev
            if curr_is_punc or prev_is_punc:
                sp = u''
            elif prev_is_cjk != curr_is_cjk:
                sp = space
        ret = ret + sp + char
        prev = (curr_is_cjk, curr_is_punc)
    return ret


# get clipboard text then process
subprocess.Popen(["xdotool", "key", "Ctrl+a"])
sleep(0.03)
subprocess.Popen(["xdotool", "key", "Ctrl+c"])
sleep(0.03)
subprocess.Popen(["xdotool", "key", "Right"])
original_text = pyperclip.paste()
processed_text=_chinese_auto_spacing(original_text)

for item in replace_dict:
    reg = re.compile(re.escape(space2+item+space2), re.IGNORECASE)
    processed_text=re.sub(reg,space2+replace_dict[item]+space2, processed_text)

# and~ paste it!
pyperclip.copy(processed_text)
sleep(0.03)
subprocess.Popen(["xdotool", "key", "Ctrl+a"])
sleep(0.03)
subprocess.Popen(["xdotool", "key", "Ctrl+v"])
sleep(0.03)
subprocess.Popen(["xdotool", "key", "Right"])
if not "\n" in original_text:
    sleep(0.1)
    subprocess.Popen(["xdotool", "key", "BackSpace"])
